>>> from scanner import scan_tokens
>>> from tokens import Token, TokenType as tt

>>> def token_types(tokens):
...     return [token.type for token in tokens]

Empty input case
>>> token_types(scan_tokens('')) == [tt.EOF]
True

Can scan symbols and ignore whitespace
>>> token_types(scan_tokens('()')) == [tt.LEFT_PAREN, tt.RIGHT_PAREN, tt.EOF]
True

#>>> token_types(scan_tokens(' + - */ ')) == [tt.PLUS, tt.MINUS, tt.STAR, tt.SLASH]
#True
#
#Can scan numbers and variables
#>>> scan_tokens('0') == [Token(tt.NUMBER, number_value=0)]
#True
#>>> scan_tokens('1234') == [Token(tt.NUMBER, number_value=1234)]
#True
#>>> scan_tokens('a') == [Token(tt.VARIABLE, variable_name='a')]
#True
#>>> scan_tokens('height') == [Token(tt.VARIABLE, variable_name='height')]
#True
#
#Can scan everything together
#>>> tokens = scan_tokens('1 + (x * y)')
#>>> token_types(tokens) == [tt.NUMBER, tt.PLUS, tt.LEFT_PAREN, tt.VARIABLE, tt.STAR, tt.VARIABLE, tt.RIGHT_PAREN]
#True
#>>> tokens[0] == Token(tt.NUMBER, number_value=1)
#True
#>>> tokens[3] == Token(tt.VARIABLE, variable_name='x')
#True
#>>> tokens[5] == Token(tt.VARIABLE, variable_name='y')
#True
#
#>>> scan_tokens('{')
#Traceback (most recent call last):
#    ...
#Exception: scanner error: unexpected character '{'
