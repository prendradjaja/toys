This class allows convenient arithmetic for vectors.

(I mainly intend to use this for Advent of Code: casual-mode, not
leaderboard-mode. Authored 2023 after AoC 2023. Try this out next year!)

For example, instead of writing this ...

    def get_position(initial_position, velocity, time):
        return addvec(
            initial_position,
            mulvec(velocity, time)
        )

... we can write this:

    def get_position(initial_position, velocity, time):
        return initial_position + velocity * time

For more details, see tests.txt (which doubles as documentation)

Alternatives:
- Use NumPy
    - Advantages of vector.py: No virtualenv. No startup time.
    - Disadvantages of vector.py: Copy & paste.
- Use addvec mulvec etc

Not implemented:
- division, because there's more possibilities: float division, floor
  division, modulo... (implement later if needed)

This directory also contains:
- tests.txt (which doubles as documentation)
- A few example programs from my Advent of Code 2023 solutions (which double
  as additional tests)
    - 16a-2023.py: Uses addition and hashing
    - 18b-2023.py: Uses addition and multiplication
    - 21a-2023.py: Uses addition and coercion
- run-tests.sh: Run all of the above tests

I'm not sure if I want this library to support coercion (e.g. adding a Vector
and a tuple). It's convenient but can make it easier to introduce bugs if you
e.g. miss a spot where you add two tuples instead of adding a tuple to a
Vector. For now, coercion is supported (for convenience and for similarity to
NumPy), but maybe I'll have a stronger opinion one way or the other after
using it some (i.e. probably after another year or two of AoC).
